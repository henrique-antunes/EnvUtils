#!/usr/bin/env zsh
export RUNZSH=no
DEV_FOLDER=~/AlphaSights-Dev
DEVELOPER_INITIALS="HAnt"

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# This script will install everything you need from a fresh MacBook to a development ready environment
# First we install Homebrew. It will be the package manager for most of installed stuff
# It will install Command Line Tools so it may pop up some messages
# Git and another tools will be installed also
# /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# Install Misc. Apps
if read -q "choice?Do you want to install Slack? Press Y/y "; then
    if brew install --cask slack;then
    else
        fancy_echo "Slack already installed"
    fi
    fancy_echo "You can change the theme to Dracule pasting these colors anywhere on the chat and switching sidebar"
    echo "#282A36,#44475A,#44475A,#8BE9FD,#6272A4,#FFFFFF,#50FA7B,#FF5555"
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

# Install Oh-My-Zsh. 
if read -q "choice?Do you want to install Oh-My-Zsh?
Note that if you try to install oh-my-zsh later, most of your .zshrc configurations in this script will be lost
Press Y/y "; then
    if sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"; then
        source ~/.zshrc
    else
        fancy_echo "OhMyZsh probably already installed"
    fi
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

Installing asdf and plugins
fancy_echo "Installing asdf"
if brew install asdf; then
    append_to_zshrc ". $(brew --prefix asdf)/libexec/asdf.sh"
    fancy_echo "Installing NodeJs asdf plugin"
    brew install gpg gawk
    if asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git ;then
        asdf install nodejs 12.22.10
        asdf global nodejs 12.22.10
    else
        fancy_echo "NodeJs plugin already installed"
    fi
    fancy_echo "Installing Ruby asdf plugin"
    if asdf plugin add ruby ;then
        asdf install ruby 2.6.5
        asdf global ruby 2.6.5
    else
        fancy_echo "Ruby plugin already installed"
    fi
else
    fancy_echo "asdf probably already installed"
fi

# Install IDETools
if read -q "choice?Do you want to install VSCode, InstelliJ and OhMyZsh/Iterm2? Press Y/y "; then
    brew install --cask iterm2
    brew install --cask intellij-idea
    brew install --cask visual-studio-code
    if read -q "choice?Do you want to install Dracula theme for IDEs? Press Y/y "; then
        fancy_echo "Installing Dracula Theme for VSCode"
        git clone https://github.com/dracula/visual-studio-code.git ~/.vscode/extensions/theme-dracula
        cd ~/.vscode/extensions/theme-dracula
        npm install
        npm run build
        fancy_echo "Run Visual Studio Code. The Dracula Syntax Theme will be available from File -> Preferences -> Color Theme dropdown menu."
        fancy_echo "Installing Dracula Theme for Iterm2"
        git clone https://github.com/dracula/iterm.git ~/theme-dracula/iterm/
        fancy_echo "ITerm dracula theme installed to activate visit https://draculatheme.com/iterm"
        fancy_echo "To install Dracula Theme for IntelliJ visit https://draculatheme.com/jetbrains"
        fancy_echo "Installing Dracula Theme for Oh-My-Zsh"
        git clone https://github.com/dracula/zsh.git ~/theme-dracula/zsh
        ln -s ~/theme-dracula/zsh/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme
        fancy_echo "Updating zshrc theme for dracula"
        sed -i '' 's/ZSH_THEME=.*/ZSH_THEME="dracula"/' ~/.zshrc
    fi
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

if read -q "choice?Do you want to install FiraCode font? Press Y/y "; then
  brew tap homebrew/cask-fonts
  brew install --cask font-fira-code
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

if read -q "choice?Do you want to install Postgres? Press Y/y "; then
  brew install postgresql@13
  brew services start postgresql@13
  fancy_echo "Adding postgres to zshrc"
  echo -e '\nexport PATH=/usr/local/opt/postgresql@13/bin:$PATH' >> ${ZDOTDIR:-~}/.zshrc
  source ~/.zshrc
  fancy_echo "Creating user postgres"
  createuser --superuser postgres
  fancy_echo "Creating DB alpha_dev"
  createdb alpha_dev
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

if read -q "choice?Do you want to configure Pistachio? Press Y/y "; then
  git clone https://github.com/alphasights/pistachio $DEV_FOLDER/pistachio
  brew install rbenv
  brew install shared-mime-info
  append_to_zshrc 'eval "$(rbenv init -)"'
  cd $DEV_FOLDER/pistachio
  ./bin/setup-rbenv.sh
  cp .example-env .env.development
  sed -i '' "s/DEVELOPER_INITIALS=.*/DEVELOPER_INITIALS=$DEVELOPER_INITIALS/" .env.development
  sed -i '' "s/DB_HOST=.*/DB_HOST=localhost/" .env.development
  bundle install
  bundle exec rake db:create db:migrate db:reload_views
  if read -q "choice?Do you want to set up a copy of production data for Pistachio?
  Just remember you need to be on VPN for that. Press Y/y "; then
    brew install awscli
    CAKE_LOCAL_DB_HOST=localhost bin/get-cake-slice
  else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
  fi
  if read -q "choice?Do you want to set up a RabbitMQ? Press Y/y "; then
    brew install rabbitmq
    export PATH=$PATH:/usr/local/opt/rabbitmq/sbin
    append_to_zshrc 'export PATH=$PATH:/usr/local/opt/rabbitmq/sbin'
    brew install wget
    wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.9.0/rabbitmq_delayed_message_exchange-3.9.0.ez -P /usr/local/Cellar/rabbitmq/3.9.13/plugins
    rabbitmq-plugins enable rabbitmq_delayed_message_exchange
    brew services restart rabbitmq
  else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
  fi
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi

if read -q "choice?Do you want to configure Client-Portal? Press Y/y "; then
  git clone https://github.com/alphasights/client-portal.git $DEV_FOLDER/client-portal
  fancy_echo "Please download and install the lastest version of JDK8 from oracle"
  open https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
  brew install kotlin
  brew tap elastic/tap
  brew install elastic/tap/elasticsearch-full
  if [ ! -f "$HOME/.gradle/gradle.properties" ]; then
    touch "$HOME/.gradle/gradle.properties"
  fi
  fancy_echo "Create a github personal access token with repo and package permission scope selected to be added to the gradle and npmrc files"
  read -p "Enter your GitHub User: "
  echo "github.username=$REPLY" > "$HOME/.gradle/gradle.properties"
  read -p "Enter your GitHub Token: "
  echo "github.token=$REPLY" > "$HOME/.gradle/gradle.properties"
  npm login --registry https://npm.pkg.github.com/ --scope=@alphasights
  cd $DEV_FOLDER/client-portal
  createdb client_portal; createdb client_portal_test;
else
    fancy_echo "'$choice' not 'Y' or 'y'. Moving On..."
fi